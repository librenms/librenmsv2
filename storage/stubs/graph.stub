<?php
/**
 * GraphDummy.php
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @package    LibreNMS
 * @link       http://librenms.org
 * @copyright  2017 Paul Heinrichs
 * @author     Paul Heinrichs <pheinrichs@gmail.com>
 */

namespace App\Graphs;

use App\Data\RRD;
use App\Graphs\Graph;

/**
 * Template Class generated by make:graph
 *
 */
class GraphDummy extends Graph
{
    /**
     * Get the chart headers for this graph
     * One string for each data set
     *
     * @return array
     */
    protected function getHeaders()
    {
        $headers = [];

        return $headers;
    }

    /**
     * Returns the name(s) of the relationships to load for this graph
     * This may also be an associative array with a closure that accepts a query object
     * If you do not want to load any relationships, pass an empty array
     *
     * @return string|array
     */
    protected function getRelation()
    {
        return [];
    }

    /**
     * Get a Collection of db data for this graph
     * This is a helper function to the correct data related to Device
     *
     * @return Collection
     */
    protected function getData()
    {

    }


    /**
     * Return the RRD definition string for Graph creation
     *
     * @return string
     */
    protected function getRRDGraphDefinition()
    {
        $rrd_file = RRD::getFileName($this->device,'graph-data');

    }

    /**
     * Return the RRD definition string for Xport
     *
     * @return string
     */
    protected function getRRDXportDefinition()
    {
        $rrd_file = RRD::getFileName($this->device,'graph-data');

    }
}
